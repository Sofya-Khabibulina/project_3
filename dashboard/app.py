import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π",
    layout="wide",
    initial_sidebar_state="expanded"
)
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    spb = pd.read_csv('data/vacancies_spb.csv')
    chel = pd.read_csv('data/vacancies_chel.csv')
    tol = pd.read_csv('data/vacancies_tol.csv')

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –≥–æ—Ä–æ–¥–æ–≤
    spb['–ì–æ—Ä–æ–¥'] = '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
    chel['–ì–æ—Ä–æ–¥'] = '–ß–µ–ª—è–±–∏–Ω—Å–∫'
    tol['–ì–æ—Ä–æ–¥'] = '–¢–æ–ª—å—è—Ç—Ç–∏'

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    full_df = pd.concat([spb, chel, tol], ignore_index=True)
    return full_df

df = load_data()

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
section = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
    ["–ì–ª–∞–≤–Ω–∞—è", "–î–∞–Ω–Ω—ã–µ", "EDA", "–¢—Ä–µ–Ω–¥—ã", "–í—ã–≤–æ–¥—ã"]
)

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
if section == "–ì–ª–∞–≤–Ω–∞—è":
    st.title('–ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Ç—Ä–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏ üîç')
    st.header("–û –ø—Ä–æ–µ–∫—Ç–µ")
    st.markdown("""
    ### –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: hh.ru
    –ù–∞—à –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞ —Ç—Ä—ë—Ö –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏. 
    –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–∞–∫–∏—Ö —Å—Ñ–µ—Ä–∞—Ö —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º–∏, –∫–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º–∏ –≤ —Ç—Ä–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏, —Ä–∞–∑–Ω—ã—Ö –ø–æ —á–∏—Å–ª—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è (–≥–æ—Ä–æ–¥–∞: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ß–µ–ª—è–±–∏–Ω—Å–∫, –¢–æ–ª—å—è—Ç—Ç–∏) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö hh.ru. 
    –ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ –º—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–Ω—ã–µ –ø–ª–∞—Ç—ã, —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∫–∞–Ω—Å–∏—è–º, –∏ –≤—ã—è–≤–ª—è–µ–º –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö –ø–æ –∫–∞–∂–¥–æ–º—É –≥–æ—Ä–æ–¥—É. 
    –ú—ã —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ 500 –≤–∞–∫–∞–Ω—Å–∏—è—Ö –ø–æ –∫–∞–∂–¥–æ–º—É –≥–æ—Ä–æ–¥—É, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É –ø–æ –∫–∞–∂–¥–æ–º—É –≥–æ—Ä–æ–¥—É, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å—Ñ–µ—Ä–∞–º–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
 
    """)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
    st.dataframe(df.sample(5), use_container_width=True)

# –†–∞–∑–¥–µ–ª —Å –¥–∞–Ω–Ω—ã–º–∏
elif section == "–î–∞–Ω–Ω—ã–µ":
    st.header("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üìñ")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    col1, col2, col3 = st.columns(3)

    with col1:
        # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
        selected_city = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥",
            ["–í—Å–µ"] + list(df['–ì–æ—Ä–æ–¥'].unique())
        )

    with col2:
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–∂–∏–º—É —Ä–∞–±–æ—Ç—ã
        work_modes = ["–í—Å–µ"] + list(df['–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'].dropna().unique())
        selected_mode = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã",
            work_modes
        )

    with col3:
        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã
        experience_levels = ["–í—Å–µ"] + list(df['–û–ø—ã—Ç'].dropna().unique())
        selected_exp = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
            experience_levels
        )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    city_df = df.copy()

    if selected_city != "–í—Å–µ":
        city_df = city_df[city_df['–ì–æ—Ä–æ–¥'] == selected_city]

    if selected_mode != "–í—Å–µ":
        city_df = city_df[city_df['–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'] == selected_mode]

    if selected_exp != "–í—Å–µ":
        city_df = city_df[city_df['–û–ø—ã—Ç'] == selected_exp]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    st.dataframe(city_df, use_container_width=True)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π", len(city_df))
    with col2:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π", city_df['–ù–∞–∑–≤–∞–Ω–∏–µ'].nunique())
    with col3:
        min_salary = city_df['min_salary'].min()
        st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{min_salary:.0f} ‚ÇΩ")
    with col4:
        max_salary = city_df['max_salary'].max()
        st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{max_salary:.0f} ‚ÇΩ")

    st.markdown("""**–î–∞–Ω–Ω—ã–µ csv —Ñ–∞–π–ª—ã –∏ dataframe —Å–æ–∑–¥–∞–Ω—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.**""")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

    # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É (–Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å with –¥–ª—è –æ–¥–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏)
    tab = st.tabs(["–¢–æ–ø-10 –≤–∞–∫–∞–Ω—Å–∏–π"])[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) —ç–ª–µ–º–µ–Ω—Ç

    with tab:
        # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        selected_city = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π",
            ["–í—Å–µ –≥–æ—Ä–æ–¥–∞"] + list(df['–ì–æ—Ä–æ–¥'].unique()),
            key='city_selector'
        )

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
        if selected_city == "–í—Å–µ –≥–æ—Ä–æ–¥–∞":
            city_data = df
            title_suffix = "–≤–æ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö"
        else:
            city_data = df[df['–ì–æ—Ä–æ–¥'] == selected_city]
            title_suffix = f"–≤ {selected_city}"

        # –¢–æ–ø-10 –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        top_vacancies = city_data['–ù–∞–∑–≤–∞–Ω–∏–µ'].value_counts().nlargest(10)

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ç–æ–ø-10 –≤–∞–∫–∞–Ω—Å–∏–π
        fig = px.bar(top_vacancies,
                     orientation='h',
                     title=f'–¢–æ–ø-10 –≤–∞–∫–∞–Ω—Å–∏–π {title_suffix}',
                     labels={'value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π', 'index': '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏'},
                     color=top_vacancies.values,
                     color_continuous_scale='Blues')

        fig.update_layout(showlegend=False)
        st.plotly_chart(fig, use_container_width=True)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Ç–∞–±–ª–∏—Ü–∞ —Å —Ç–æ–ø-10 –≤–∞–∫–∞–Ω—Å–∏–π
        st.write("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø-10 –≤–∞–∫–∞–Ω—Å–∏–π:")
        st.dataframe(top_vacancies.reset_index().rename(
            columns={'index': '–í–∞–∫–∞–Ω—Å–∏—è', '–ù–∞–∑–≤–∞–Ω–∏–µ': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}),
            use_container_width=True,
            hide_index=True)

# –†–∞–∑–¥–µ–ª EDA
elif section == "EDA":
    st.header("–ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º üìä")

    # 1. –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    selected_city = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        options=df['–ì–æ—Ä–æ–¥'].unique(),
        key='city_selector'
    )

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
    city_data = df[df['–ì–æ—Ä–æ–¥'] == selected_city]

    # 2. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã (—Ç–µ–ø–µ—Ä—å –±–µ–∑ –∫–æ–ª—å—Ü–∞)
    st.subheader(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã –≤ {selected_city}")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã
    exp_distribution = city_data['–û–ø—ã—Ç'].value_counts().reset_index()
    exp_distribution.columns = ['–û–ø—ã—Ç', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

    fig_pie = px.pie(
        exp_distribution,
        values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        names='–û–ø—ã—Ç',
        color='–û–ø—ã—Ç',
        color_discrete_sequence=px.colors.qualitative.Pastel,
        hole=0,  # –¢–µ–ø–µ—Ä—å –æ–±—ã—á–Ω–∞—è –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (–Ω–µ –∫–æ–ª—å—Ü–æ)
        title=f'–î–æ–ª—è –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ç—Ä–µ–±—É–µ–º–æ–º—É –æ–ø—ã—Ç—É –≤ {selected_city}'
    )
    fig_pie.update_traces(
        textposition='outside',
        textinfo='percent+label',
        pull=[0.1, 0, 0, 0],  # –í—ã–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
        marker=dict(line=dict(color='#000000', width=0.5))
    )
    st.plotly_chart(fig_pie, use_container_width=True)

    # 3. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
    st.subheader(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –æ–ø—ã—Ç—É –≤ {selected_city}")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    category_exp_counts = city_data.groupby(['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–û–ø—ã—Ç']).size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')

    fig_bar = px.bar(
        category_exp_counts,
        x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        color='–û–ø—ã—Ç',
        barmode='group',
        title=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –æ–ø—ã—Ç—É –≤ {selected_city}',
        color_discrete_sequence=px.colors.qualitative.Set2,
        height=500
    )
    fig_bar.update_layout(
        xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–∞–∫–∞–Ω—Å–∏–π",
        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π",
        legend_title="–¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç"
    )
    st.plotly_chart(fig_bar, use_container_width=True)

    # 4. –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)
    st.subheader(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ä–µ–∂–∏–º—É —Ä–∞–±–æ—Ç—ã –≤ {selected_city}")

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Å–ª—É—á–∞–π–Ω—ã–π —Å–¥–≤–∏–≥ (jitter) –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–µ–∫
    np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    city_data['jitter'] = np.random.uniform(-0.2, 0.2, size=len(city_data))

    fig_scatter = px.scatter(
        city_data,
        x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        y='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã',
        color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',  # –¶–≤–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
        hover_data=['–ù–∞–∑–≤–∞–Ω–∏–µ', 'min_salary', 'max_salary'],
        title=f'–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ä–µ–∂–∏–º—É —Ä–∞–±–æ—Ç—ã –≤ {selected_city}',
        height=600,
        width=1000,
        color_discrete_sequence=px.colors.qualitative.Pastel
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    fig_scatter.update_traces(
        marker=dict(size=12, opacity=0.7, line=dict(width=0.5, color='DarkSlateGrey')),
        hovertemplate=(
            "<b>%{customdata[0]}</b><br>"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %{x}<br>"
            "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: %{y}<br>"
            "–ó–∞—Ä–ø–ª–∞—Ç–∞: %{customdata[1]:,.0f} - %{customdata[2]:,.0f} ‚ÇΩ<br>"
            "<extra></extra>"
        )
    )

    fig_scatter.update_layout(
        xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–∞–∫–∞–Ω—Å–∏–π",
        yaxis_title="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã",
        xaxis={'categoryorder': 'total descending'},  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        showlegend=False  # –£–±–∏—Ä–∞–µ–º –ª–µ–≥–µ–Ω–¥—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å)
    )

    st.plotly_chart(fig_scatter, use_container_width=True)

    # 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.subheader(f"–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ {selected_city}")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π", len(city_data))

    with col2:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π", city_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].nunique())

    with col3:
        avg_salary = (city_data['min_salary'].mean() + city_data['max_salary'].mean()) / 2
        st.metric("–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{avg_salary:,.0f} ‚ÇΩ")

    st.markdown(""" ### –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ 
**title**: –ù–∞–∑–≤–∞–Ω–∏–µ - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äúobject‚Äù  
**salary**: –ó–∞—Ä–ø–ª–∞—Ç–∞ - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äúobject‚Äù  
**experience**: –û–ø—ã—Ç - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äúobject‚Äù  
**work_format**: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã - —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äúobject‚Äù  
**–ö–∞—Ç–µ–≥–æ—Ä–∏—è**: –í —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–µ –º—ã –≤—ã–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äúobject‚Äù  
**min_salary**: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äúfloat‚Äù  
**max_salary**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äúfloat‚Äù  
**–ì–æ—Ä–æ–¥**: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±—Ä–∞–Ω—ã –≤–∞–∫–∞–Ω—Å–∏–∏, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äúobject‚Äù  """)

# –†–∞–∑–¥–µ–ª —Ç—Ä–µ–Ω–¥–æ–≤
elif section == "–¢—Ä–µ–Ω–¥—ã":
    st.header("–¢—Ä–µ–Ω–¥—ã –∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ üìà")

    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å–æ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    df['avg_salary'] = (df['min_salary'] + df['max_salary']) / 2

    # –§–∏–ª—å—Ç—Ä—ã
    st.subheader("–§–∏–ª—å—Ç—Ä—ã")
    col1, col2, col3 = st.columns(3)

    with col1:
        selected_cities = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞",
            options=df['–ì–æ—Ä–æ–¥'].unique(),
            default=df['–ì–æ—Ä–æ–¥'].unique()
        )

    with col2:
        salary_range = st.slider(
            "–î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç (‚ÇΩ)",
            min_value=int(df['min_salary'].min()),
            max_value=int(df['max_salary'].max()),
            value=(int(df['min_salary'].quantile(0.25)), int(df['max_salary'].quantile(0.75))))

    with col3:
        selected_categories = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            options=df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique(),
            default=df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique()
        )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_df = df[
        (df['–ì–æ—Ä–æ–¥'].isin(selected_cities)) &
        (df['avg_salary'].between(salary_range[0], salary_range[1])) &
        (df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(selected_categories))
        ]

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ - –∫–∞–∂–¥–∞—è –≤ —Å–≤–æ–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
    st.subheader("–î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    col1, col2, col3 = st.columns([1, 6, 1])  # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —à–∏—Ä–µ
    with col2:
        fig = px.box(
            filtered_df,
            x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            y=['min_salary', 'max_salary'],
            title='–†–∞–∑–±—Ä–æ—Å –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
            labels={'value': '–ó–∞—Ä–ø–ª–∞—Ç–∞ (‚ÇΩ)', 'variable': '–¢–∏–ø –∑–∞—Ä–ø–ª–∞—Ç—ã'}
        )
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç")
    col1, col2, col3 = st.columns([1, 6, 1])
    with col2:
        fig = px.scatter(
            filtered_df,
            x='min_salary',
            y='max_salary',
            color='–ì–æ—Ä–æ–¥',
            hover_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            title='–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç'
        )
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("–¢–æ–ø-5 —Å–∞–º—ã—Ö –≤—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**–ü–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–µ:**")
        top_min = filtered_df.groupby('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')['min_salary'].max().nlargest(5)
        st.dataframe(top_min.reset_index().rename(columns={'min_salary': '–ú–∏–Ω. –∑–∞—Ä–ø–ª–∞—Ç–∞ (‚ÇΩ)'}))

    with col2:
        st.markdown("**–ü–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–µ:**")
        top_max = filtered_df.groupby('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')['max_salary'].max().nlargest(5)
        st.dataframe(top_max.reset_index().rename(columns={'max_salary': '–ú–∞–∫—Å. –∑–∞—Ä–ø–ª–∞—Ç–∞ (‚ÇΩ)'}))

# –†–∞–∑–¥–µ–ª –≤—ã–≤–æ–¥–æ–≤
elif section == "–í—ã–≤–æ–¥—ã":
    st.header("–í—ã–≤–æ–¥—ã")
    st.markdown("""
    1. –ó–∞—Ä–ø–ª–∞—Ç—ã: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ ‚Äî –ª–∏–¥–µ—Ä –ø–æ —É—Ä–æ–≤–Ω—é –∑–∞—Ä–ø–ª–∞—Ç, —Å—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã—à–µ, —á–µ–º –≤ –¢–æ–ª—å—è—Ç—Ç–∏ –∏ –ß–µ–ª—è–±–∏–Ω—Å–∫–µ.
    2. –°–ø—Ä–æ—Å: –ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –≤ —Å—Ñ–µ—Ä–∞—Ö –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞, –ø—Ä–æ–¥–∞–∂, —Å—Ñ–µ—Ä–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ (–≤ –ß–µ–ª—è–±–∏–Ω—Å–∫–µ –∏ –¢–æ–ª—å—è—Ç—Ç–∏)
    3. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π —Ç—Ä–µ–±—É—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç 1 –¥–æ 3 –ª–µ—Ç –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å–æ–≤—Å–µ–º.
    4. –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –í –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –±–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å ‚Äú–æ—á–Ω—ã–º‚Äù —Ñ–æ—Ä–º–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã (—Ç.–µ. –Ω–∞ –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è).
    """)

    st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    st.markdown("""
    - –°–æ–∏—Å–∫–∞—Ç–µ–ª—è–º: –ø–µ—Ä–µ–µ–∑–¥ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –º–æ–∂–µ—Ç –¥–∞—Ç—å –ø—Ä–∏—Ä–æ—Å—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã, –Ω–æ —Å—Ç–æ–∏—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–∑–Ω–∏. –í –¢–æ–ª—å—è—Ç—Ç–∏ –∏ –ß–µ–ª—è–±–∏–Ω—Å–∫–µ –º–µ–Ω—å—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –≤—ã—Å–æ–∫–∏–º–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏, –Ω–æ –µ—Å—Ç—å —Ä–µ–¥–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
    - –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º: –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∑–∞ –∫–∞–¥—Ä—ã –≤—ã—à–µ, –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã. –í –¢–æ–ª—å—è—Ç—Ç–∏ –∏ –ß–µ–ª—è–±–∏–Ω—Å–∫–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–µ—à–µ–≤–ª–µ, –Ω–æ —Ç–æ–ø-–∫–∞–¥—Ä—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥—É—Ç –¥–æ—Ä–æ–≥–∏–º–∏.
    """)

    st.subheader("–î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏")
    st.markdown("""
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏, —á—Ç–æ–±—ã –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ–∫–∞—Ç—å –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ –∫–∞–∂–¥–æ–π –∏ –ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã, —á–∞—Å—Ç–æ—Ç–∞ –≤—ã–ø–ª–∞—Ç –∏ —Ç.–¥.""")

